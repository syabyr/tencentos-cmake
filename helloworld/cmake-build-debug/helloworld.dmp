
helloworld:     file format elf32-littlearm


Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000438 	.word	0x20000438
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800128c 	.word	0x0800128c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000043c 	.word	0x2000043c
 80001d0:	0800128c 	.word	0x0800128c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	4e0d      	ldr	r6, [pc, #52]	; (8000504 <__libc_init_array+0x38>)
 80004d0:	4d0d      	ldr	r5, [pc, #52]	; (8000508 <__libc_init_array+0x3c>)
 80004d2:	1b76      	subs	r6, r6, r5
 80004d4:	10b6      	asrs	r6, r6, #2
 80004d6:	d006      	beq.n	80004e6 <__libc_init_array+0x1a>
 80004d8:	2400      	movs	r4, #0
 80004da:	f855 3b04 	ldr.w	r3, [r5], #4
 80004de:	3401      	adds	r4, #1
 80004e0:	4798      	blx	r3
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d1f9      	bne.n	80004da <__libc_init_array+0xe>
 80004e6:	4e09      	ldr	r6, [pc, #36]	; (800050c <__libc_init_array+0x40>)
 80004e8:	4d09      	ldr	r5, [pc, #36]	; (8000510 <__libc_init_array+0x44>)
 80004ea:	1b76      	subs	r6, r6, r5
 80004ec:	f000 fece 	bl	800128c <_init>
 80004f0:	10b6      	asrs	r6, r6, #2
 80004f2:	d006      	beq.n	8000502 <__libc_init_array+0x36>
 80004f4:	2400      	movs	r4, #0
 80004f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fa:	3401      	adds	r4, #1
 80004fc:	4798      	blx	r3
 80004fe:	42a6      	cmp	r6, r4
 8000500:	d1f9      	bne.n	80004f6 <__libc_init_array+0x2a>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	080012c0 	.word	0x080012c0
 8000508:	080012c0 	.word	0x080012c0
 800050c:	080012c8 	.word	0x080012c8
 8000510:	080012c0 	.word	0x080012c0

08000514 <memset>:
 8000514:	b4f0      	push	{r4, r5, r6, r7}
 8000516:	0786      	lsls	r6, r0, #30
 8000518:	d046      	beq.n	80005a8 <memset+0x94>
 800051a:	1e54      	subs	r4, r2, #1
 800051c:	2a00      	cmp	r2, #0
 800051e:	d03c      	beq.n	800059a <memset+0x86>
 8000520:	b2ca      	uxtb	r2, r1
 8000522:	4603      	mov	r3, r0
 8000524:	e001      	b.n	800052a <memset+0x16>
 8000526:	3c01      	subs	r4, #1
 8000528:	d337      	bcc.n	800059a <memset+0x86>
 800052a:	f803 2b01 	strb.w	r2, [r3], #1
 800052e:	079d      	lsls	r5, r3, #30
 8000530:	d1f9      	bne.n	8000526 <memset+0x12>
 8000532:	2c03      	cmp	r4, #3
 8000534:	d92a      	bls.n	800058c <memset+0x78>
 8000536:	b2cd      	uxtb	r5, r1
 8000538:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800053c:	2c0f      	cmp	r4, #15
 800053e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000542:	d934      	bls.n	80005ae <memset+0x9a>
 8000544:	f1a4 0210 	sub.w	r2, r4, #16
 8000548:	f022 0c0f 	bic.w	ip, r2, #15
 800054c:	f103 0720 	add.w	r7, r3, #32
 8000550:	0916      	lsrs	r6, r2, #4
 8000552:	4467      	add	r7, ip
 8000554:	f103 0210 	add.w	r2, r3, #16
 8000558:	e942 5504 	strd	r5, r5, [r2, #-16]
 800055c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000560:	3210      	adds	r2, #16
 8000562:	42ba      	cmp	r2, r7
 8000564:	d1f8      	bne.n	8000558 <memset+0x44>
 8000566:	1c72      	adds	r2, r6, #1
 8000568:	f014 0f0c 	tst.w	r4, #12
 800056c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000570:	f004 060f 	and.w	r6, r4, #15
 8000574:	d013      	beq.n	800059e <memset+0x8a>
 8000576:	1f33      	subs	r3, r6, #4
 8000578:	f023 0303 	bic.w	r3, r3, #3
 800057c:	3304      	adds	r3, #4
 800057e:	4413      	add	r3, r2
 8000580:	f842 5b04 	str.w	r5, [r2], #4
 8000584:	4293      	cmp	r3, r2
 8000586:	d1fb      	bne.n	8000580 <memset+0x6c>
 8000588:	f006 0403 	and.w	r4, r6, #3
 800058c:	b12c      	cbz	r4, 800059a <memset+0x86>
 800058e:	b2ca      	uxtb	r2, r1
 8000590:	441c      	add	r4, r3
 8000592:	f803 2b01 	strb.w	r2, [r3], #1
 8000596:	429c      	cmp	r4, r3
 8000598:	d1fb      	bne.n	8000592 <memset+0x7e>
 800059a:	bcf0      	pop	{r4, r5, r6, r7}
 800059c:	4770      	bx	lr
 800059e:	4634      	mov	r4, r6
 80005a0:	4613      	mov	r3, r2
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d1f3      	bne.n	800058e <memset+0x7a>
 80005a6:	e7f8      	b.n	800059a <memset+0x86>
 80005a8:	4614      	mov	r4, r2
 80005aa:	4603      	mov	r3, r0
 80005ac:	e7c1      	b.n	8000532 <memset+0x1e>
 80005ae:	461a      	mov	r2, r3
 80005b0:	4626      	mov	r6, r4
 80005b2:	e7e0      	b.n	8000576 <memset+0x62>

080005b4 <register_fini>:
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <register_fini+0xc>)
 80005b6:	b113      	cbz	r3, 80005be <register_fini+0xa>
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <register_fini+0x10>)
 80005ba:	f000 b805 	b.w	80005c8 <atexit>
 80005be:	4770      	bx	lr
 80005c0:	00000000 	.word	0x00000000
 80005c4:	080005d5 	.word	0x080005d5

080005c8 <atexit>:
 80005c8:	2300      	movs	r3, #0
 80005ca:	4601      	mov	r1, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 b81a 	b.w	8000608 <__register_exitproc>

080005d4 <__libc_fini_array>:
 80005d4:	b538      	push	{r3, r4, r5, lr}
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <__libc_fini_array+0x24>)
 80005d8:	4d08      	ldr	r5, [pc, #32]	; (80005fc <__libc_fini_array+0x28>)
 80005da:	1b5b      	subs	r3, r3, r5
 80005dc:	109c      	asrs	r4, r3, #2
 80005de:	d007      	beq.n	80005f0 <__libc_fini_array+0x1c>
 80005e0:	3b04      	subs	r3, #4
 80005e2:	441d      	add	r5, r3
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f855 3904 	ldr.w	r3, [r5], #-4
 80005ea:	4798      	blx	r3
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d1f9      	bne.n	80005e4 <__libc_fini_array+0x10>
 80005f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80005f4:	f000 be50 	b.w	8001298 <_fini>
 80005f8:	080012cc 	.word	0x080012cc
 80005fc:	080012c8 	.word	0x080012c8

08000600 <__retarget_lock_acquire_recursive>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <__retarget_lock_release_recursive>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__register_exitproc>:
 8000608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800060c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8000690 <__register_exitproc+0x88>
 8000610:	4606      	mov	r6, r0
 8000612:	f8da 0000 	ldr.w	r0, [sl]
 8000616:	4698      	mov	r8, r3
 8000618:	460f      	mov	r7, r1
 800061a:	4691      	mov	r9, r2
 800061c:	f7ff fff0 	bl	8000600 <__retarget_lock_acquire_recursive>
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <__register_exitproc+0x84>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8000628:	b324      	cbz	r4, 8000674 <__register_exitproc+0x6c>
 800062a:	6865      	ldr	r5, [r4, #4]
 800062c:	2d1f      	cmp	r5, #31
 800062e:	dc26      	bgt.n	800067e <__register_exitproc+0x76>
 8000630:	b95e      	cbnz	r6, 800064a <__register_exitproc+0x42>
 8000632:	1cab      	adds	r3, r5, #2
 8000634:	3501      	adds	r5, #1
 8000636:	f8da 0000 	ldr.w	r0, [sl]
 800063a:	6065      	str	r5, [r4, #4]
 800063c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8000640:	f7ff ffe0 	bl	8000604 <__retarget_lock_release_recursive>
 8000644:	2000      	movs	r0, #0
 8000646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800064a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800064e:	2101      	movs	r1, #1
 8000650:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 8000654:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8000658:	40a9      	lsls	r1, r5
 800065a:	430a      	orrs	r2, r1
 800065c:	2e02      	cmp	r6, #2
 800065e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8000662:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
 8000666:	d1e4      	bne.n	8000632 <__register_exitproc+0x2a>
 8000668:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800066c:	4319      	orrs	r1, r3
 800066e:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
 8000672:	e7de      	b.n	8000632 <__register_exitproc+0x2a>
 8000674:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8000678:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800067c:	e7d5      	b.n	800062a <__register_exitproc+0x22>
 800067e:	f8da 0000 	ldr.w	r0, [sl]
 8000682:	f7ff ffbf 	bl	8000604 <__retarget_lock_release_recursive>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800068a:	e7dc      	b.n	8000646 <__register_exitproc+0x3e>
 800068c:	080012a4 	.word	0x080012a4
 8000690:	20000428 	.word	0x20000428

08000694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000698:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800069a:	e003      	b.n	80006a4 <LoopCopyDataInit>

0800069c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800069e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006a2:	3104      	adds	r1, #4

080006a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006ac:	d3f6      	bcc.n	800069c <CopyDataInit>
  ldr  r2, =_sbss
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006b0:	e002      	b.n	80006b8 <LoopFillZerobss>

080006b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006b4:	f842 3b04 	str.w	r3, [r2], #4

080006b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006bc:	d3f9      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006be:	f000 fdb3 	bl	8001228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f7ff ff03 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c6:	f000 fd1b 	bl	8001100 <main>
  bx  lr    
 80006ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006cc:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80006d0:	080012cc 	.word	0x080012cc
  ldr  r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006d8:	20000438 	.word	0x20000438
  ldr  r2, =_sbss
 80006dc:	20000438 	.word	0x20000438
  ldr  r3, = _ebss
 80006e0:	2000047c 	.word	0x2000047c

080006e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b084      	sub	sp, #16
 80006ea:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	9b01      	ldr	r3, [sp, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <__NVIC_SetPriorityGrouping+0x3c>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	9a02      	ldr	r2, [sp, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	9b03      	ldr	r3, [sp, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	9b02      	ldr	r3, [sp, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a03      	ldr	r2, [pc, #12]	; (8000724 <__NVIC_SetPriorityGrouping+0x3c>)
 8000718:	9b02      	ldr	r3, [sp, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	b004      	add	sp, #16
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <__NVIC_GetPriorityGrouping+0x10>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b082      	sub	sp, #8
 800073e:	4603      	mov	r3, r0
 8000740:	9100      	str	r1, [sp, #0]
 8000742:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0a      	blt.n	8000764 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	9b00      	ldr	r3, [sp, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x48>)
 8000754:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000762:	e00b      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	9b00      	ldr	r3, [sp, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4907      	ldr	r1, [pc, #28]	; (8000788 <__NVIC_SetPriority+0x4c>)
 800076a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	b002      	add	sp, #8
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b088      	sub	sp, #32
 800078e:	9003      	str	r0, [sp, #12]
 8000790:	9102      	str	r1, [sp, #8]
 8000792:	9201      	str	r2, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	9b03      	ldr	r3, [sp, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	9307      	str	r3, [sp, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	9b07      	ldr	r3, [sp, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	9306      	str	r3, [sp, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	9b07      	ldr	r3, [sp, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x2c>
 80007b2:	9b07      	ldr	r3, [sp, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x2e>
 80007b8:	2300      	movs	r3, #0
 80007ba:	9305      	str	r3, [sp, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c0:	9b06      	ldr	r3, [sp, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	9b02      	ldr	r3, [sp, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	9b05      	ldr	r3, [sp, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d4:	9b05      	ldr	r3, [sp, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	b008      	add	sp, #32
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b500      	push	{lr}
 80007ea:	b083      	sub	sp, #12
 80007ec:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ee:	9b01      	ldr	r3, [sp, #4]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f6:	d301      	bcc.n	80007fc <SysTick_Config+0x14>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00f      	b.n	800081c <SysTick_Config+0x34>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fc:	4a09      	ldr	r2, [pc, #36]	; (8000824 <SysTick_Config+0x3c>)
 80007fe:	9b01      	ldr	r3, [sp, #4]
 8000800:	3b01      	subs	r3, #1
 8000802:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000804:	210f      	movs	r1, #15
 8000806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080a:	f7ff ff97 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x3c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <SysTick_Config+0x3c>)
 8000816:	2207      	movs	r2, #7
 8000818:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	b003      	add	sp, #12
 8000820:	f85d fb04 	ldr.w	pc, [sp], #4
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b500      	push	{lr}
 800082a:	b083      	sub	sp, #12
 800082c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082e:	9801      	ldr	r0, [sp, #4]
 8000830:	f7ff ff5a 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 8000834:	bf00      	nop
 8000836:	b003      	add	sp, #12
 8000838:	f85d fb04 	ldr.w	pc, [sp], #4

0800083c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083c:	b500      	push	{lr}
 800083e:	b087      	sub	sp, #28
 8000840:	4603      	mov	r3, r0
 8000842:	9102      	str	r1, [sp, #8]
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t prioritygroup = 0x00U;
 800084a:	2300      	movs	r3, #0
 800084c:	9305      	str	r3, [sp, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084e:	f7ff ff6b 	bl	8000728 <__NVIC_GetPriorityGrouping>
 8000852:	9005      	str	r0, [sp, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000854:	9a01      	ldr	r2, [sp, #4]
 8000856:	9902      	ldr	r1, [sp, #8]
 8000858:	9805      	ldr	r0, [sp, #20]
 800085a:	f7ff ff97 	bl	800078c <NVIC_EncodePriority>
 800085e:	4602      	mov	r2, r0
 8000860:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff68 	bl	800073c <__NVIC_SetPriority>
}
 800086c:	bf00      	nop
 800086e:	b007      	add	sp, #28
 8000870:	f85d fb04 	ldr.w	pc, [sp], #4

08000874 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000874:	b500      	push	{lr}
 8000876:	b083      	sub	sp, #12
 8000878:	9001      	str	r0, [sp, #4]
   return SysTick_Config(TicksNumb);
 800087a:	9801      	ldr	r0, [sp, #4]
 800087c:	f7ff ffb4 	bl	80007e8 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	b003      	add	sp, #12
 8000886:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800088c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800088c:	b500      	push	{lr}
 800088e:	b087      	sub	sp, #28
 8000890:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000892:	9b01      	ldr	r3, [sp, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	e22f      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d075      	beq.n	8000994 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008a8:	4ba3      	ldr	r3, [pc, #652]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f003 030c 	and.w	r3, r3, #12
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d00c      	beq.n	80008ce <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b4:	4ba0      	ldr	r3, [pc, #640]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d112      	bne.n	80008e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c0:	4b9d      	ldr	r3, [pc, #628]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008cc:	d10b      	bne.n	80008e6 <HAL_RCC_OscConfig+0x5a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ce:	4b9a      	ldr	r3, [pc, #616]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d05b      	beq.n	8000992 <HAL_RCC_OscConfig+0x106>
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d157      	bne.n	8000992 <HAL_RCC_OscConfig+0x106>
      {
        return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e20a      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e6:	9b01      	ldr	r3, [sp, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ee:	d106      	bne.n	80008fe <HAL_RCC_OscConfig+0x72>
 80008f0:	4b91      	ldr	r3, [pc, #580]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a90      	ldr	r2, [pc, #576]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e01d      	b.n	800093a <HAL_RCC_OscConfig+0xae>
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000906:	d10c      	bne.n	8000922 <HAL_RCC_OscConfig+0x96>
 8000908:	4b8b      	ldr	r3, [pc, #556]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a8a      	ldr	r2, [pc, #552]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 800090e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b88      	ldr	r3, [pc, #544]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a87      	ldr	r2, [pc, #540]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 800091a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e00b      	b.n	800093a <HAL_RCC_OscConfig+0xae>
 8000922:	4b85      	ldr	r3, [pc, #532]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a84      	ldr	r2, [pc, #528]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	4b82      	ldr	r3, [pc, #520]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a81      	ldr	r2, [pc, #516]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000938:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800093a:	9b01      	ldr	r3, [sp, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d013      	beq.n	800096a <HAL_RCC_OscConfig+0xde>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000942:	f000 fbd7 	bl	80010f4 <HAL_GetTick>
 8000946:	9004      	str	r0, [sp, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000948:	e008      	b.n	800095c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094a:	f000 fbd3 	bl	80010f4 <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	9b04      	ldr	r3, [sp, #16]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	2b64      	cmp	r3, #100	; 0x64
 8000956:	d901      	bls.n	800095c <HAL_RCC_OscConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8000958:	2303      	movs	r3, #3
 800095a:	e1cf      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095c:	4b76      	ldr	r3, [pc, #472]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f0      	beq.n	800094a <HAL_RCC_OscConfig+0xbe>
 8000968:	e014      	b.n	8000994 <HAL_RCC_OscConfig+0x108>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800096a:	f000 fbc3 	bl	80010f4 <HAL_GetTick>
 800096e:	9004      	str	r0, [sp, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000970:	e008      	b.n	8000984 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000972:	f000 fbbf 	bl	80010f4 <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	9b04      	ldr	r3, [sp, #16]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	2b64      	cmp	r3, #100	; 0x64
 800097e:	d901      	bls.n	8000984 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000980:	2303      	movs	r3, #3
 8000982:	e1bb      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000984:	4b6c      	ldr	r3, [pc, #432]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f0      	bne.n	8000972 <HAL_RCC_OscConfig+0xe6>
 8000990:	e000      	b.n	8000994 <HAL_RCC_OscConfig+0x108>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000992:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000994:	9b01      	ldr	r3, [sp, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	2b00      	cmp	r3, #0
 800099e:	d063      	beq.n	8000a68 <HAL_RCC_OscConfig+0x1dc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a0:	4b65      	ldr	r3, [pc, #404]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 030c 	and.w	r3, r3, #12
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00b      	beq.n	80009c4 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ac:	4b62      	ldr	r3, [pc, #392]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d11c      	bne.n	80009f2 <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b8:	4b5f      	ldr	r3, [pc, #380]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d116      	bne.n	80009f2 <HAL_RCC_OscConfig+0x166>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c4:	4b5c      	ldr	r3, [pc, #368]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <HAL_RCC_OscConfig+0x150>
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d001      	beq.n	80009dc <HAL_RCC_OscConfig+0x150>
      {
        return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e18f      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009dc:	4b56      	ldr	r3, [pc, #344]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009e4:	9b01      	ldr	r3, [sp, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4953      	ldr	r1, [pc, #332]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 80009ec:	4313      	orrs	r3, r2
 80009ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f0:	e03a      	b.n	8000a68 <HAL_RCC_OscConfig+0x1dc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d020      	beq.n	8000a3c <HAL_RCC_OscConfig+0x1b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009fa:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <HAL_RCC_OscConfig+0x2b0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a00:	f000 fb78 	bl	80010f4 <HAL_GetTick>
 8000a04:	9004      	str	r0, [sp, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a08:	f000 fb74 	bl	80010f4 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	9b04      	ldr	r3, [sp, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e170      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1a:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f0      	beq.n	8000a08 <HAL_RCC_OscConfig+0x17c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a2e:	9b01      	ldr	r3, [sp, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4940      	ldr	r1, [pc, #256]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000a36:	4313      	orrs	r3, r2
 8000a38:	600b      	str	r3, [r1, #0]
 8000a3a:	e015      	b.n	8000a68 <HAL_RCC_OscConfig+0x1dc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <HAL_RCC_OscConfig+0x2b0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a42:	f000 fb57 	bl	80010f4 <HAL_GetTick>
 8000a46:	9004      	str	r0, [sp, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a48:	e008      	b.n	8000a5c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a4a:	f000 fb53 	bl	80010f4 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	9b04      	ldr	r3, [sp, #16]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e14f      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f0      	bne.n	8000a4a <HAL_RCC_OscConfig+0x1be>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d030      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a74:	9b01      	ldr	r3, [sp, #4]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d016      	beq.n	8000aaa <HAL_RCC_OscConfig+0x21e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <HAL_RCC_OscConfig+0x2b4>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a82:	f000 fb37 	bl	80010f4 <HAL_GetTick>
 8000a86:	9004      	str	r0, [sp, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a88:	e008      	b.n	8000a9c <HAL_RCC_OscConfig+0x210>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a8a:	f000 fb33 	bl	80010f4 <HAL_GetTick>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	9b04      	ldr	r3, [sp, #16]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0x210>
        {
          return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e12f      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f0      	beq.n	8000a8a <HAL_RCC_OscConfig+0x1fe>
 8000aa8:	e015      	b.n	8000ad6 <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_RCC_OscConfig+0x2b4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab0:	f000 fb20 	bl	80010f4 <HAL_GetTick>
 8000ab4:	9004      	str	r0, [sp, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab6:	e008      	b.n	8000aca <HAL_RCC_OscConfig+0x23e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab8:	f000 fb1c 	bl	80010f4 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	9b04      	ldr	r3, [sp, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_OscConfig+0x23e>
        {
          return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e118      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f0      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ad6:	9b01      	ldr	r3, [sp, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80a2 	beq.w	8000c28 <HAL_RCC_OscConfig+0x39c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f88d 3017 	strb.w	r3, [sp, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d110      	bne.n	8000b18 <HAL_RCC_OscConfig+0x28c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	9303      	str	r3, [sp, #12]
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_RCC_OscConfig+0x2ac>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b12:	2301      	movs	r3, #1
 8000b14:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_RCC_OscConfig+0x2b8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d120      	bne.n	8000b66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_RCC_OscConfig+0x2b8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_RCC_OscConfig+0x2b8>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b30:	f000 fae0 	bl	80010f4 <HAL_GetTick>
 8000b34:	9004      	str	r0, [sp, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b36:	e010      	b.n	8000b5a <HAL_RCC_OscConfig+0x2ce>
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	42470000 	.word	0x42470000
 8000b40:	42470e80 	.word	0x42470e80
 8000b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b48:	f000 fad4 	bl	80010f4 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	9b04      	ldr	r3, [sp, #16]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d901      	bls.n	8000b5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e0d0      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b5a:	4b6a      	ldr	r3, [pc, #424]	; (8000d04 <HAL_RCC_OscConfig+0x478>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f0      	beq.n	8000b48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b66:	9b01      	ldr	r3, [sp, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d106      	bne.n	8000b7c <HAL_RCC_OscConfig+0x2f0>
 8000b6e:	4b66      	ldr	r3, [pc, #408]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b72:	4a65      	ldr	r2, [pc, #404]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6713      	str	r3, [r2, #112]	; 0x70
 8000b7a:	e01c      	b.n	8000bb6 <HAL_RCC_OscConfig+0x32a>
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	d10c      	bne.n	8000b9e <HAL_RCC_OscConfig+0x312>
 8000b84:	4b60      	ldr	r3, [pc, #384]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b88:	4a5f      	ldr	r2, [pc, #380]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b94:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000b9c:	e00b      	b.n	8000bb6 <HAL_RCC_OscConfig+0x32a>
 8000b9e:	4b5a      	ldr	r3, [pc, #360]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ba2:	4a59      	ldr	r2, [pc, #356]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000ba4:	f023 0301 	bic.w	r3, r3, #1
 8000ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8000baa:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bae:	4a56      	ldr	r2, [pc, #344]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bb6:	9b01      	ldr	r3, [sp, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d015      	beq.n	8000bea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bbe:	f000 fa99 	bl	80010f4 <HAL_GetTick>
 8000bc2:	9004      	str	r0, [sp, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc4:	e00a      	b.n	8000bdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f000 fa95 	bl	80010f4 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	9b04      	ldr	r3, [sp, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e08f      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0ee      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x33a>
 8000be8:	e014      	b.n	8000c14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bea:	f000 fa83 	bl	80010f4 <HAL_GetTick>
 8000bee:	9004      	str	r0, [sp, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bf0:	e00a      	b.n	8000c08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf2:	f000 fa7f 	bl	80010f4 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	9b04      	ldr	r3, [sp, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d901      	bls.n	8000c08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e079      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1ee      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c14:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_RCC_OscConfig+0x39c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a39      	ldr	r2, [pc, #228]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c28:	9b01      	ldr	r3, [sp, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d064      	beq.n	8000cfa <HAL_RCC_OscConfig+0x46e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d05c      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c3c:	9b01      	ldr	r3, [sp, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d141      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_RCC_OscConfig+0x480>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4a:	f000 fa53 	bl	80010f4 <HAL_GetTick>
 8000c4e:	9004      	str	r0, [sp, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c52:	f000 fa4f 	bl	80010f4 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	9b04      	ldr	r3, [sp, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e04b      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f0      	bne.n	8000c52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c70:	9b01      	ldr	r3, [sp, #4]
 8000c72:	69da      	ldr	r2, [r3, #28]
 8000c74:	9b01      	ldr	r3, [sp, #4]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	9b01      	ldr	r3, [sp, #4]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7e:	019b      	lsls	r3, r3, #6
 8000c80:	431a      	orrs	r2, r3
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	061b      	lsls	r3, r3, #24
 8000c94:	491c      	ldr	r1, [pc, #112]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_RCC_OscConfig+0x480>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f000 fa28 	bl	80010f4 <HAL_GetTick>
 8000ca4:	9004      	str	r0, [sp, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca8:	f000 fa24 	bl	80010f4 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	9b04      	ldr	r3, [sp, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e020      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x41c>
 8000cc6:	e018      	b.n	8000cfa <HAL_RCC_OscConfig+0x46e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_RCC_OscConfig+0x480>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f000 fa11 	bl	80010f4 <HAL_GetTick>
 8000cd2:	9004      	str	r0, [sp, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd6:	f000 fa0d 	bl	80010f4 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	9b04      	ldr	r3, [sp, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e009      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_RCC_OscConfig+0x47c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1f0      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x44a>
 8000cf4:	e001      	b.n	8000cfa <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <HAL_RCC_OscConfig+0x470>
    }
  }
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	b007      	add	sp, #28
 8000d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d04:	40007000 	.word	0x40007000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	42470060 	.word	0x42470060

08000d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d10:	b500      	push	{lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	9001      	str	r0, [sp, #4]
 8000d16:	9100      	str	r1, [sp, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d18:	9b01      	ldr	r3, [sp, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0ca      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	9a00      	ldr	r2, [sp, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d90c      	bls.n	8000d4a <HAL_RCC_ClockConfig+0x3a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d30:	4b63      	ldr	r3, [pc, #396]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d32:	9a00      	ldr	r2, [sp, #0]
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d38:	4b61      	ldr	r3, [pc, #388]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	9a00      	ldr	r2, [sp, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_ClockConfig+0x3a>
    {
      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e0b6      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d020      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x88>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x5e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	4a57      	ldr	r2, [pc, #348]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d6c:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6e:	9b01      	ldr	r3, [sp, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d005      	beq.n	8000d86 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d7a:	4b52      	ldr	r3, [pc, #328]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4a51      	ldr	r2, [pc, #324]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d80:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d84:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d86:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d8e:	9b01      	ldr	r3, [sp, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	494c      	ldr	r1, [pc, #304]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d98:	9b01      	ldr	r3, [sp, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d044      	beq.n	8000e2e <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da4:	9b01      	ldr	r3, [sp, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d107      	bne.n	8000dbc <HAL_RCC_ClockConfig+0xac>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d119      	bne.n	8000dec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e07d      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dbc:	9b01      	ldr	r3, [sp, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d003      	beq.n	8000dcc <HAL_RCC_ClockConfig+0xbc>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000dc4:	9b01      	ldr	r3, [sp, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d107      	bne.n	8000ddc <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d109      	bne.n	8000dec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e06d      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e065      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dec:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f023 0203 	bic.w	r2, r3, #3
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4932      	ldr	r1, [pc, #200]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dfe:	f000 f979 	bl	80010f4 <HAL_GetTick>
 8000e02:	9003      	str	r0, [sp, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e04:	e00a      	b.n	8000e1c <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e06:	f000 f975 	bl	80010f4 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e04d      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 020c 	and.w	r2, r3, #12
 8000e24:	9b01      	ldr	r3, [sp, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d1eb      	bne.n	8000e06 <HAL_RCC_ClockConfig+0xf6>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	9a00      	ldr	r2, [sp, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d20c      	bcs.n	8000e56 <HAL_RCC_ClockConfig+0x146>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e3e:	9a00      	ldr	r2, [sp, #0]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	9a00      	ldr	r2, [sp, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x146>
    {
      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e030      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x1a8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	4915      	ldr	r1, [pc, #84]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d009      	beq.n	8000e94 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e88:	9b01      	ldr	r3, [sp, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e94:	f000 f81c 	bl	8000ed0 <HAL_RCC_GetSysClockFreq>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8000ea6:	5ccb      	ldrb	r3, [r1, r3]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_RCC_ClockConfig+0x1bc>)
 8000eae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 f8e1 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	b005      	add	sp, #20
 8000ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	080012a8 	.word	0x080012a8
 8000ecc:	20000434 	.word	0x20000434

08000ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ed0:	b530      	push	{r4, r5, lr}
 8000ed2:	b085      	sub	sp, #20
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	9101      	str	r1, [sp, #4]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	9103      	str	r1, [sp, #12]
 8000edc:	2100      	movs	r1, #0
 8000ede:	9100      	str	r1, [sp, #0]
  uint32_t sysclockfreq = 0U;
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	9102      	str	r1, [sp, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee4:	4951      	ldr	r1, [pc, #324]	; (800102c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000ee6:	6889      	ldr	r1, [r1, #8]
 8000ee8:	f001 010c 	and.w	r1, r1, #12
 8000eec:	2908      	cmp	r1, #8
 8000eee:	d00d      	beq.n	8000f0c <HAL_RCC_GetSysClockFreq+0x3c>
 8000ef0:	2908      	cmp	r1, #8
 8000ef2:	f200 8094 	bhi.w	800101e <HAL_RCC_GetSysClockFreq+0x14e>
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_RCC_GetSysClockFreq+0x30>
 8000efa:	2904      	cmp	r1, #4
 8000efc:	d003      	beq.n	8000f06 <HAL_RCC_GetSysClockFreq+0x36>
 8000efe:	e08e      	b.n	800101e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f00:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <HAL_RCC_GetSysClockFreq+0x160>)
 8000f02:	9302      	str	r3, [sp, #8]
       break;
 8000f04:	e08e      	b.n	8001024 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f06:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <HAL_RCC_GetSysClockFreq+0x164>)
 8000f08:	9302      	str	r3, [sp, #8]
      break;
 8000f0a:	e08b      	b.n	8001024 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f0c:	4947      	ldr	r1, [pc, #284]	; (800102c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f0e:	6849      	ldr	r1, [r1, #4]
 8000f10:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000f14:	9101      	str	r1, [sp, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f16:	4945      	ldr	r1, [pc, #276]	; (800102c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f18:	6849      	ldr	r1, [r1, #4]
 8000f1a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	d024      	beq.n	8000f6c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f22:	4942      	ldr	r1, [pc, #264]	; (800102c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f24:	6849      	ldr	r1, [r1, #4]
 8000f26:	0989      	lsrs	r1, r1, #6
 8000f28:	4608      	mov	r0, r1
 8000f2a:	f04f 0100 	mov.w	r1, #0
 8000f2e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000f32:	f04f 0500 	mov.w	r5, #0
 8000f36:	ea00 0204 	and.w	r2, r0, r4
 8000f3a:	ea01 0305 	and.w	r3, r1, r5
 8000f3e:	493d      	ldr	r1, [pc, #244]	; (8001034 <HAL_RCC_GetSysClockFreq+0x164>)
 8000f40:	fb01 f003 	mul.w	r0, r1, r3
 8000f44:	2100      	movs	r1, #0
 8000f46:	fb01 f102 	mul.w	r1, r1, r2
 8000f4a:	1844      	adds	r4, r0, r1
 8000f4c:	4939      	ldr	r1, [pc, #228]	; (8001034 <HAL_RCC_GetSysClockFreq+0x164>)
 8000f4e:	fba2 0101 	umull	r0, r1, r2, r1
 8000f52:	1863      	adds	r3, r4, r1
 8000f54:	4619      	mov	r1, r3
 8000f56:	9b01      	ldr	r3, [sp, #4]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	f7ff f939 	bl	80001d4 <__aeabi_uldivmod>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4613      	mov	r3, r2
 8000f68:	9303      	str	r3, [sp, #12]
 8000f6a:	e04a      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	099b      	lsrs	r3, r3, #6
 8000f72:	461a      	mov	r2, r3
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f7c:	f04f 0100 	mov.w	r1, #0
 8000f80:	ea02 0400 	and.w	r4, r2, r0
 8000f84:	ea03 0501 	and.w	r5, r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	014b      	lsls	r3, r1, #5
 8000f96:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f9a:	0142      	lsls	r2, r0, #5
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	1b00      	subs	r0, r0, r4
 8000fa2:	eb61 0105 	sbc.w	r1, r1, r5
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	018b      	lsls	r3, r1, #6
 8000fb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000fb4:	0182      	lsls	r2, r0, #6
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	eb63 0301 	sbc.w	r3, r3, r1
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	f04f 0100 	mov.w	r1, #0
 8000fc4:	00d9      	lsls	r1, r3, #3
 8000fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000fca:	00d0      	lsls	r0, r2, #3
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	1912      	adds	r2, r2, r4
 8000fd2:	eb45 0303 	adc.w	r3, r5, r3
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	f04f 0100 	mov.w	r1, #0
 8000fde:	0299      	lsls	r1, r3, #10
 8000fe0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8000fe4:	0290      	lsls	r0, r2, #10
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	f7ff f8ed 	bl	80001d4 <__aeabi_uldivmod>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4613      	mov	r3, r2
 8001000:	9303      	str	r3, [sp, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	0c1b      	lsrs	r3, r3, #16
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	3301      	adds	r3, #1
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	9300      	str	r3, [sp, #0]

      sysclockfreq = pllvco/pllp;
 8001012:	9a03      	ldr	r2, [sp, #12]
 8001014:	9b00      	ldr	r3, [sp, #0]
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	9302      	str	r3, [sp, #8]
      break;
 800101c:	e002      	b.n	8001024 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_RCC_GetSysClockFreq+0x160>)
 8001020:	9302      	str	r3, [sp, #8]
      break;
 8001022:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001024:	9b02      	ldr	r3, [sp, #8]
}
 8001026:	4618      	mov	r0, r3
 8001028:	b005      	add	sp, #20
 800102a:	bd30      	pop	{r4, r5, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	00f42400 	.word	0x00f42400
 8001034:	017d7840 	.word	0x017d7840

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x3c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x3c>)
 8001040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001044:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x3c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x3c>)
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x3c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x3c>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f7ff fbe2 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f807 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f000 f8ab 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd08      	pop	{r3, pc}
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b500      	push	{lr}
 800107a:	b083      	sub	sp, #12
 800107c:	9001      	str	r0, [sp, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_InitTick+0x54>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_InitTick+0x58>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001090:	fbb2 f3f3 	udiv	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fbed 	bl	8000874 <HAL_SYSTICK_Config>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_InitTick+0x2c>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e00e      	b.n	80010c2 <HAL_InitTick+0x4a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a4:	9b01      	ldr	r3, [sp, #4]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	d80a      	bhi.n	80010c0 <HAL_InitTick+0x48>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010aa:	2200      	movs	r2, #0
 80010ac:	9901      	ldr	r1, [sp, #4]
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b2:	f7ff fbc3 	bl	800083c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_InitTick+0x5c>)
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <HAL_InitTick+0x4a>
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	b003      	add	sp, #12
 80010c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ca:	bf00      	nop
 80010cc:	20000434 	.word	0x20000434
 80010d0:	20000430 	.word	0x20000430
 80010d4:	2000042c 	.word	0x2000042c

080010d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_IncTick+0x14>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_IncTick+0x18>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a02      	ldr	r2, [pc, #8]	; (80010f0 <HAL_IncTick+0x18>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	4770      	bx	lr
 80010ec:	20000430 	.word	0x20000430
 80010f0:	20000478 	.word	0x20000478

080010f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010f4:	4b01      	ldr	r3, [pc, #4]	; (80010fc <HAL_GetTick+0x8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	4770      	bx	lr
 80010fc:	20000478 	.word	0x20000478

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f7ff ff99 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f801 	bl	800110c <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0xa>

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b500      	push	{lr}
 800110e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001110:	ab08      	add	r3, sp, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9fc 	bl	8000514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	ab03      	add	r3, sp, #12
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SystemClock_Config+0xac>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xac>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xac>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <SystemClock_Config+0xb0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001152:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <SystemClock_Config+0xb0>)
 8001154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <SystemClock_Config+0xb0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001166:	2302      	movs	r3, #2
 8001168:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2310      	movs	r3, #16
 8001170:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	ab08      	add	r3, sp, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fb87 	bl	800088c <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001184:	f000 f81c 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118c:	2300      	movs	r3, #0
 800118e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119c:	ab03      	add	r3, sp, #12
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fdb5 	bl	8000d10 <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011ac:	f000 f808 	bl	80011c0 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	b015      	add	sp, #84	; 0x54
 80011b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011c0:	bf00      	nop
 80011c2:	4770      	bx	lr

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_MspInit+0x40>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_MspInit+0x40>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_MspInit+0x40>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_MspInit+0x40>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_MspInit+0x40>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_MspInit+0x40>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	9b00      	ldr	r3, [sp, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	b002      	add	sp, #8
 8001202:	4770      	bx	lr
 8001204:	40023800 	.word	0x40023800

08001208 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	4770      	bx	lr

0800120c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <HardFault_Handler>

0800120e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <MemManage_Handler>

08001210 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <BusFault_Handler>

08001212 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <UsageFault_Handler>

08001214 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f7ff ff5b 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd08      	pop	{r3, pc}
	...

08001228 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <SystemInit+0x58>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <SystemInit+0x58>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <SystemInit+0x5c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <SystemInit+0x5c>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <SystemInit+0x5c>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <SystemInit+0x5c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <SystemInit+0x5c>)
 8001250:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <SystemInit+0x5c>)
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SystemInit+0x60>)
 800125e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <SystemInit+0x5c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <SystemInit+0x5c>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SystemInit+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <SystemInit+0x58>)
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	609a      	str	r2, [r3, #8]
#endif
}
 800127a:	bf00      	nop
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	40023800 	.word	0x40023800
 8001288:	24003010 	.word	0x24003010

0800128c <_init>:
 800128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128e:	bf00      	nop
 8001290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001292:	bc08      	pop	{r3}
 8001294:	469e      	mov	lr, r3
 8001296:	4770      	bx	lr

08001298 <_fini>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr
